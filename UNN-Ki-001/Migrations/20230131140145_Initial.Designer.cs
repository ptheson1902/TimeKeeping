// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UNN_Ki_001.Data;

#nullable disable

namespace UNN_Ki_001.Migrations
{
    [DbContext(typeof(KintaiDbContext))]
    [Migration("20230131140145_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Kinmu", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("KinmuCd")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_cd");

                    b.Property<string>("CreatePgm")
                        .HasColumnType("text")
                        .HasColumnName("create_pgm");

                    b.Property<string>("CreateUsr")
                        .HasColumnType("text")
                        .HasColumnName("create_usr");

                    b.Property<string>("KinmuBunrui")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_bunrui");

                    b.Property<string>("KinmuFrCtrlFlg")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_fr_ctrl_flg");

                    b.Property<string>("KinmuFrKbn")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_fr_kbn");

                    b.Property<string>("KinmuFrMarumeKbn")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_fr_marume_kbn");

                    b.Property<int?>("KinmuFrMarumeTm")
                        .HasColumnType("integer")
                        .HasColumnName("kinmu_fr_marume_tm");

                    b.Property<string>("KinmuFrTm")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_fr_tm");

                    b.Property<string>("KinmuNm")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_nm");

                    b.Property<string>("KinmuToKbn")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_to_kbn");

                    b.Property<string>("KinmuToMarumeKbn")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_to_marume_kbn");

                    b.Property<int?>("KinmuToMarumeTm")
                        .HasColumnType("integer")
                        .HasColumnName("kinmu_to_marume_tm");

                    b.Property<string>("KinmuToTm")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_to_tm");

                    b.Property<string>("Kyukei1FrKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei1_fr_kbn");

                    b.Property<string>("Kyukei1FrTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei1_fr_tm");

                    b.Property<string>("Kyukei1ToKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei1_to_kbn");

                    b.Property<string>("Kyukei1ToTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei1_to_tm");

                    b.Property<string>("Kyukei2FrKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei2_fr_kbn");

                    b.Property<string>("Kyukei2FrTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei2_fr_tm");

                    b.Property<string>("Kyukei2ToKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei2_to_kbn");

                    b.Property<string>("Kyukei2ToTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei2_to_tm");

                    b.Property<string>("Kyukei3FrKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei3_fr_kbn");

                    b.Property<string>("Kyukei3FrTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei3_fr_tm");

                    b.Property<string>("Kyukei3ToKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei3_to_kbn");

                    b.Property<string>("Kyukei3ToTm")
                        .HasColumnType("text")
                        .HasColumnName("kyukei3_to_tm");

                    b.Property<string>("KyukeiAutoFlg")
                        .HasColumnType("text")
                        .HasColumnName("kyukei_auto_flg");

                    b.Property<string>("KyukeiFrMarumeKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei_fr_marume_kbn");

                    b.Property<int?>("KyukeiFrMarumeTm")
                        .HasColumnType("integer")
                        .HasColumnName("kyukei_fr_marume_tm");

                    b.Property<string>("KyukeiToMarumeKbn")
                        .HasColumnType("text")
                        .HasColumnName("kyukei_to_marume_kbn");

                    b.Property<int?>("KyukeiToMarumeTm")
                        .HasColumnType("integer")
                        .HasColumnName("kyukei_to_marume_tm");

                    b.Property<int?>("ShoteiTm")
                        .HasColumnType("integer")
                        .HasColumnName("shotei_tm");

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_dt");

                    b.Property<string>("UpdatePgm")
                        .HasColumnType("text")
                        .HasColumnName("update_pgm");

                    b.Property<string>("UpdateUsr")
                        .HasColumnType("text")
                        .HasColumnName("update_usr");

                    b.Property<string>("ValidFlg")
                        .HasColumnType("text")
                        .HasColumnName("valid_flg");

                    b.HasKey("KigyoCd", "KinmuCd");

                    b.ToTable("m_kinmu", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Koyokeitai", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("KoyokeitaiCd")
                        .HasColumnType("text")
                        .HasColumnName("koyokeitai_cd");

                    b.Property<string>("KoyokeitaiNm")
                        .HasColumnType("text")
                        .HasColumnName("koyokeitai_nm");

                    b.Property<string>("ValidFlg")
                        .HasColumnType("text")
                        .HasColumnName("valid_flg");

                    b.HasKey("KigyoCd", "KoyokeitaiCd");

                    b.ToTable("m_koyokeitai", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Settings", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<int?>("ShimeDt")
                        .HasColumnType("integer")
                        .HasColumnName("shime_dt");

                    b.HasKey("KigyoCd");

                    b.ToTable("m_settings", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shain", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("ShainNo")
                        .HasColumnType("text")
                        .HasColumnName("shain_no");

                    b.Property<string>("KoyokeitaiCd")
                        .HasColumnType("text")
                        .HasColumnName("koyokeitai_cd");

                    b.Property<string>("NameKanaMei")
                        .HasColumnType("text")
                        .HasColumnName("name_kana_mei");

                    b.Property<string>("NameKanaSei")
                        .HasColumnType("text")
                        .HasColumnName("name_kana_sei");

                    b.Property<string>("NameMei")
                        .HasColumnType("text")
                        .HasColumnName("name_mei");

                    b.Property<string>("NameSei")
                        .HasColumnType("text")
                        .HasColumnName("name_sei");

                    b.Property<string>("NyusyaDt")
                        .HasColumnType("text")
                        .HasColumnName("nyusha_dt");

                    b.Property<string>("ShokushuCd")
                        .HasColumnType("text")
                        .HasColumnName("shokushu_cd");

                    b.Property<string>("ShozokuCd")
                        .HasColumnType("text")
                        .HasColumnName("shozoku_cd");

                    b.Property<string>("TaishokuDt")
                        .HasColumnType("text")
                        .HasColumnName("taishoku_dt");

                    b.HasKey("KigyoCd", "ShainNo");

                    b.HasIndex("KigyoCd", "KoyokeitaiCd");

                    b.HasIndex("KigyoCd", "ShokushuCd");

                    b.HasIndex("KigyoCd", "ShozokuCd");

                    b.ToTable("m_shain", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shokushu", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("ShokushuCd")
                        .HasColumnType("text")
                        .HasColumnName("shokushu_cd");

                    b.Property<string>("ShokushuNm")
                        .HasColumnType("text")
                        .HasColumnName("shokushu_nm");

                    b.Property<string>("ValidFlg")
                        .HasColumnType("text")
                        .HasColumnName("valid_flg");

                    b.HasKey("KigyoCd", "ShokushuCd");

                    b.ToTable("m_shokushu", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shozoku", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("ShozokuCd")
                        .HasColumnType("text")
                        .HasColumnName("shozoku_cd");

                    b.Property<string>("ShozokuNm")
                        .HasColumnType("text")
                        .HasColumnName("shozoku_nm");

                    b.Property<string>("ValidFlg")
                        .HasColumnType("text")
                        .HasColumnName("valid_flg");

                    b.HasKey("KigyoCd", "ShozokuCd");

                    b.ToTable("m_shozoku", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.T_Kinmu", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("ShainNo")
                        .HasColumnType("text")
                        .HasColumnName("shain_no");

                    b.Property<string>("KinmuDt")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_dt");

                    b.Property<string>("Biko")
                        .HasColumnType("text")
                        .HasColumnName("biko");

                    b.Property<string>("CreatePgm")
                        .HasColumnType("text")
                        .HasColumnName("create_pgm");

                    b.Property<string>("CreateUsr")
                        .HasColumnType("text")
                        .HasColumnName("create_usr");

                    b.Property<DateTime?>("DakokuFrDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dakoku_fr_date");

                    b.Property<DateTime?>("DakokuToDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dakoku_to_date");

                    b.Property<int?>("Hoteigai")
                        .HasColumnType("integer")
                        .HasColumnName("hoteigai");

                    b.Property<int?>("Hoteikyu")
                        .HasColumnType("integer")
                        .HasColumnName("hoteikyu");

                    b.Property<int?>("Hoteinai")
                        .HasColumnType("integer")
                        .HasColumnName("hoteinai");

                    b.Property<string>("KinmuCd")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_cd");

                    b.Property<DateTime?>("KinmuFrDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("kinmu_fr_date");

                    b.Property<DateTime?>("KinmuToDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("kinmu_to_date");

                    b.Property<int?>("Kojo")
                        .HasColumnType("integer")
                        .HasColumnName("kojo");

                    b.Property<int?>("Kyukei")
                        .HasColumnType("integer")
                        .HasColumnName("kyukei");

                    b.Property<int?>("Shinya")
                        .HasColumnType("integer")
                        .HasColumnName("shinya");

                    b.Property<int?>("Shotei")
                        .HasColumnType("integer")
                        .HasColumnName("shotei");

                    b.Property<int?>("Sorodo")
                        .HasColumnType("integer")
                        .HasColumnName("sorodo");

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_dt");

                    b.Property<string>("UpdatePgm")
                        .HasColumnType("text")
                        .HasColumnName("update_pgm");

                    b.Property<string>("UpdateUsr")
                        .HasColumnType("text")
                        .HasColumnName("update_usr");

                    b.HasKey("KigyoCd", "ShainNo", "KinmuDt");

                    b.HasIndex("KigyoCd", "KinmuCd");

                    b.ToTable("t_kinmu", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.T_Kyukei", b =>
                {
                    b.Property<string>("KigyoCd")
                        .HasColumnType("text")
                        .HasColumnName("kigyo_cd");

                    b.Property<string>("ShainNo")
                        .HasColumnType("text")
                        .HasColumnName("shain_no");

                    b.Property<string>("KinmuDt")
                        .HasColumnType("text")
                        .HasColumnName("kinmu_dt");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<string>("CreatePgm")
                        .HasColumnType("text")
                        .HasColumnName("create_pgm");

                    b.Property<string>("CreateUsr")
                        .HasColumnType("text")
                        .HasColumnName("create_usr");

                    b.Property<DateTime?>("DakokuFrDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dakoku_fr_date");

                    b.Property<DateTime?>("DakokuToDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dakoku_to_date");

                    b.Property<int?>("Kyukei")
                        .HasColumnType("integer")
                        .HasColumnName("kyukei");

                    b.Property<DateTime?>("UpdateDt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_dt");

                    b.Property<string>("UpdatePgm")
                        .HasColumnType("text")
                        .HasColumnName("update_pgm");

                    b.Property<string>("UpdateUsr")
                        .HasColumnType("text")
                        .HasColumnName("update_usr");

                    b.HasKey("KigyoCd", "ShainNo", "KinmuDt", "SeqNo");

                    b.ToTable("t_kyukei", "public");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shain", b =>
                {
                    b.HasOne("UNN_Ki_001.Data.Models.M_Koyokeitai", "Koyokeitai")
                        .WithMany("Shains")
                        .HasForeignKey("KigyoCd", "KoyokeitaiCd");

                    b.HasOne("UNN_Ki_001.Data.Models.M_Shokushu", "Shokushu")
                        .WithMany("Shains")
                        .HasForeignKey("KigyoCd", "ShokushuCd");

                    b.HasOne("UNN_Ki_001.Data.Models.M_Shozoku", "Shozoku")
                        .WithMany("Shains")
                        .HasForeignKey("KigyoCd", "ShozokuCd");

                    b.Navigation("Koyokeitai");

                    b.Navigation("Shokushu");

                    b.Navigation("Shozoku");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.T_Kinmu", b =>
                {
                    b.HasOne("UNN_Ki_001.Data.Models.M_Kinmu", "MKinmu")
                        .WithMany("TKinmus")
                        .HasForeignKey("KigyoCd", "KinmuCd");

                    b.Navigation("MKinmu");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.T_Kyukei", b =>
                {
                    b.HasOne("UNN_Ki_001.Data.Models.T_Kinmu", "TKinmu")
                        .WithMany("TKyukeis")
                        .HasForeignKey("KigyoCd", "ShainNo", "KinmuDt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TKinmu");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Kinmu", b =>
                {
                    b.Navigation("TKinmus");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Koyokeitai", b =>
                {
                    b.Navigation("Shains");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shokushu", b =>
                {
                    b.Navigation("Shains");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.M_Shozoku", b =>
                {
                    b.Navigation("Shains");
                });

            modelBuilder.Entity("UNN_Ki_001.Data.Models.T_Kinmu", b =>
                {
                    b.Navigation("TKyukeis");
                });
#pragma warning restore 612, 618
        }
    }
}
